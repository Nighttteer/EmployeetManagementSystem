# Generated by Django 5.2.3 on 2025-06-19 18:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='药品名称')),
                ('unit', models.CharField(max_length=20, verbose_name='剂量单位')),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='用法说明')),
                ('category', models.CharField(choices=[('antihypertensive', '降压药'), ('hypoglycemic', '降糖药'), ('lipid_lowering', '降脂药'), ('anticoagulant', '抗凝药'), ('diuretic', '利尿剂'), ('beta_blocker', 'β受体阻滞剂'), ('ace_inhibitor', 'ACE抑制剂'), ('other', '其他')], default='other', max_length=30, verbose_name='药品分类')),
                ('generic_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='通用名')),
                ('brand_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='商品名')),
                ('manufacturer', models.CharField(blank=True, max_length=200, null=True, verbose_name='生产厂家')),
                ('specification', models.CharField(blank=True, max_length=100, null=True, verbose_name='规格')),
                ('contraindications', models.TextField(blank=True, null=True, verbose_name='禁忌症')),
                ('side_effects', models.TextField(blank=True, null=True, verbose_name='副作用')),
                ('interactions', models.TextField(blank=True, null=True, verbose_name='药物相互作用')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用状态')),
                ('is_prescription', models.BooleanField(default=True, verbose_name='处方药')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '药品信息',
                'verbose_name_plural': '药品信息',
                'db_table': 'medication',
            },
        ),
        migrations.CreateModel(
            name='MedicationPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.FloatField(verbose_name='剂量')),
                ('frequency', models.CharField(choices=[('QD', '每日一次'), ('BID', '每日两次'), ('TID', '每日三次'), ('QID', '每日四次'), ('Q12H', '每12小时一次'), ('Q8H', '每8小时一次'), ('Q6H', '每6小时一次'), ('PRN', '按需服用')], max_length=10, verbose_name='频次')),
                ('time_of_day', models.CharField(choices=[('before_breakfast', '早餐前'), ('after_breakfast', '早餐后'), ('before_lunch', '午餐前'), ('after_lunch', '午餐后'), ('before_dinner', '晚餐前'), ('after_dinner', '晚餐后'), ('before_sleep', '睡前'), ('morning', '早晨'), ('noon', '中午'), ('evening', '晚上')], max_length=30, verbose_name='服药时间')),
                ('start_date', models.DateField(verbose_name='开始日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='结束日期')),
                ('duration_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='持续天数')),
                ('special_instructions', models.TextField(blank=True, null=True, verbose_name='特殊说明')),
                ('dietary_requirements', models.TextField(blank=True, null=True, verbose_name='饮食要求')),
                ('status', models.CharField(choices=[('active', '进行中'), ('completed', '已完成'), ('stopped', '已停药'), ('paused', '已暂停')], default='active', max_length=20, verbose_name='状态')),
                ('requires_monitoring', models.BooleanField(default=False, verbose_name='需要监测')),
                ('monitoring_notes', models.TextField(blank=True, null=True, verbose_name='监测说明')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescribed_plans', to=settings.AUTH_USER_MODEL, verbose_name='医生')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='medication.medication', verbose_name='药品')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_plans', to=settings.AUTH_USER_MODEL, verbose_name='患者')),
            ],
            options={
                'verbose_name': '用药计划',
                'verbose_name_plural': '用药计划',
                'db_table': 'medication_plan',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicationReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_time', models.DateTimeField(verbose_name='提醒时间')),
                ('scheduled_time', models.TimeField(verbose_name='计划服药时间')),
                ('status', models.CharField(choices=[('pending', '待服用'), ('taken', '已服用'), ('missed', '已错过'), ('skipped', '已跳过')], default='pending', max_length=20, verbose_name='状态')),
                ('confirm_time', models.DateTimeField(blank=True, null=True, verbose_name='确认时间')),
                ('dosage_taken', models.FloatField(blank=True, null=True, verbose_name='实际服用剂量')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('side_effects_reported', models.TextField(blank=True, null=True, verbose_name='副作用报告')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='medication.medicationplan', verbose_name='用药计划')),
            ],
            options={
                'verbose_name': '用药提醒',
                'verbose_name_plural': '用药提醒',
                'db_table': 'medication_reminder',
                'ordering': ['-reminder_time'],
            },
        ),
        migrations.CreateModel(
            name='MedicationStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_quantity', models.PositiveIntegerField(verbose_name='当前数量')),
                ('unit', models.CharField(max_length=20, verbose_name='单位')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='有效期')),
                ('batch_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='批次号')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, verbose_name='低库存阈值')),
                ('purchase_date', models.DateField(blank=True, null=True, verbose_name='采购日期')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='采购价格')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='medication.medication', verbose_name='药品')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_stocks', to=settings.AUTH_USER_MODEL, verbose_name='患者')),
            ],
            options={
                'verbose_name': '药品库存',
                'verbose_name_plural': '药品库存',
                'db_table': 'medication_stock',
            },
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['name'], name='medication_name_418b2b_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['category', 'is_active'], name='medication_categor_82201e_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationplan',
            index=models.Index(fields=['patient', 'status'], name='medication__patient_32049f_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationplan',
            index=models.Index(fields=['doctor', 'created_at'], name='medication__doctor__edc0b7_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationplan',
            index=models.Index(fields=['start_date', 'end_date'], name='medication__start_d_7e582a_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationreminder',
            index=models.Index(fields=['plan', 'reminder_time'], name='medication__plan_id_cdd548_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationreminder',
            index=models.Index(fields=['status', 'reminder_time'], name='medication__status_5c118a_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationreminder',
            index=models.Index(fields=['reminder_time'], name='medication__reminde_e67328_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationstock',
            index=models.Index(fields=['patient', 'current_quantity'], name='medication__patient_4df212_idx'),
        ),
        migrations.AddIndex(
            model_name='medicationstock',
            index=models.Index(fields=['expiry_date'], name='medication__expiry__ae22c1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='medicationstock',
            unique_together={('patient', 'medication')},
        ),
    ]
